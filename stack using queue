#include <iostream>
#include <queue>
using namespace std;

class Queue {
private:
    queue<int> q;

public:
    void push(int x) {
        q.push(x);
    }

    int pop() {
        if (q.empty()) {
            cout << "Queue is empty" << endl;
            return -1; // Return an error indicator
        }

        int front_element = q.front();
        q.pop();
        return front_element;
    }

    bool empty() {
        return q.empty();
    }
};

class Stack {
private:
    Queue q1, q2;

public:
    void push(int x) {
        // Push the element to an empty queue and move all elements from the other queue to this one
        q2.push(x);
        while (!q1.empty()) {
            q2.push(q1.pop());
        }

        // Swap the names of the queues to maintain the order
        swap(q1, q2);
    }

    int pop() {
        if (q1.empty()) {
            cout << "Stack is empty" << endl;
            return -1; // Return an error indicator
        }

        return q1.pop();
    }

    bool empty() {
        return q1.empty();
    }
};

int main() {
    Stack s;
    s.push(1);
    s.push(2);
    s.push(3);

    cout << "Popped element: " << s.pop() << endl;
    cout << "Popped element: " << s.pop() << endl;

    s.push(4);
    cout << "Popped element: " << s.pop() << endl;
    cout << "Popped element: " << s.pop() << endl;

    return 0;
}
